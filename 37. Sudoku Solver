class Solution {
    public void solveSudoku(char[][] arr) {
       solve(arr, 0, 0);
    }
    public boolean solve(char[][] arr, int row,int col){
        if(col == 9){
            row++;
            col= 0;
        }
        if(row == 9)
        return true;
        if(arr[row][col] == '.'){
            for(int i = 1; i <= 9; i++){
                if(isSafe(arr, row, col, i)){
                    arr[row][col] = (char)(i+'0');
                    if(solve(arr, row, col+1) == true){
                        return true;
                    }
                    arr[row][col] = '.';
                }
            }
        }
        else{
            if(solve(arr, row, col+1)){
                return true;
            }
        }
        return false;
    }
    public boolean isSafe(char[][] arr, int row, int col, int n){
        char val = (char)(n + '0');
        for(int r = 0; r < 9; r++){
            if(arr[r][col] == val)
            return false;
        }
        for(int c = 0; c < 9; c++){
            if(arr[row][c] == val)
            return false;
        }
        int r = (row/3)*3;
        int c = (col/3)*3;
        for(int i = r; i < r+3; i++){
            for(int j = c; j < c+3; j++){
                if(arr[i][j] == val)
                return false;
            }
        }
        return true;
    }
}
