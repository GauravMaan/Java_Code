class Solution {
    List<List<String>> ans = new ArrayList<>();
    public List<List<String>> solveNQueens(int n) {
        boolean[][] arr = new boolean[n][n];
        NQueens(arr,0,n);
            return ans;
    }
    public  List<List<String>> NQueens(boolean[][] arr, int row, int Q){
        if(Q == 0){
           ans.add(fun(arr));
           return ans;
        }
        for(int c = 0; c < arr.length; c++){
            if(isSafe(arr, row, c)){
                arr[row][c] = true;
                NQueens(arr, row+1, Q-1);
                arr[row][c] = false;
            }
        }
        return ans;
    }
    public List<String> fun(boolean[][] arr){
        List<String> li = new ArrayList<>();
        for(int i = 0; i < arr.length; i++){
            String s = "";
            for(int j = 0; j < arr.length; j++){
                if(arr[i][j] == true)
                {
                    s += "Q";
                }
                else{
                    s += ".";
                }
            }
            li.add(s);
        }
        return li;
    }
    public boolean isSafe(boolean[][] arr, int row, int col) {
        int r = row;
        while (r >= 0) {
            if (arr[r][col] == true) {
                return false;
            }
            r--;
        }
        r = row;
        int c = col;
        while (r >= 0 && c >= 0) {
            if (arr[r][c] == true) {
                return false;
            }
            r--;
            c--;
        }
        r = row;
        c = col;
        while(r >= 0 && c < arr.length){
            if(arr[r][c] == true){
               return false;
        }
        r--;
        c++;
    }
        return true;
    }

}
